/*
 * Global stylesheet establishing the dark, eerie aesthetic foundation and core design system for the entire application.
 * I'm implementing the Mr. Robot-inspired visual language with custom properties, typography, animations, and component base styles for consistent theming.
 */

@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';

/* I'm defining CSS custom properties for dynamic theming */
:root {
  /* Color system - dark theme with eerie accents */
  --color-primary: #22d3ee;
  --color-secondary: #6366f1;
  --color-accent: #a855f7;

  --bg-primary: #000000;
  --bg-secondary: #0a0a0a;
  --bg-tertiary: #171717;
  --bg-card: #1a1a1a;

  --text-primary: #f5f5f5;
  --text-secondary: #a3a3a3;
  --text-tertiary: #737373;
  --text-muted: #525252;

  --border-primary: #262626;
  --border-secondary: #404040;
  --border-accent: #22d3ee;

  --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.5);
  --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.7);
  --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.8);
  --shadow-glow: 0 0 20px rgba(34, 211, 238, 0.3);

  /* Typography scale */
  --font-mono: 'JetBrains Mono', 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
  --font-sans: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;

  /* Spacing and sizing */
  --border-radius: 0.25rem;
  --border-radius-lg: 0.5rem;

  /* Animation durations */
  --duration-fast: 150ms;
  --duration-medium: 300ms;
  --duration-slow: 500ms;

  /* Z-index scale */
  --z-dropdown: 1000;
  --z-modal: 1050;
  --z-popover: 1100;
  --z-tooltip: 1200;
}

/* I'm establishing base styles for the entire application */
* {
  box-sizing: border-box;
}

html {
  height: 100%;
  scroll-behavior: smooth;
}

body {
  height: 100%;
  margin: 0;
  padding: 0;
  font-family: var(--font-sans);
  background-color: var(--bg-primary);
  color: var(--text-primary);
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
}

/* I'm setting up smooth focus management */
*:focus {
  outline: none;
}

*:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

/* I'm defining typography hierarchy */
h1, h2, h3, h4, h5, h6 {
  margin: 0;
  font-weight: 300;
  letter-spacing: 0.025em;
  line-height: 1.2;
}

h1 { font-size: 2.5rem; }
h2 { font-size: 2rem; }
h3 { font-size: 1.5rem; }
h4 { font-size: 1.25rem; }
h5 { font-size: 1.125rem; }
h6 { font-size: 1rem; }

p {
  margin: 0;
  line-height: 1.6;
}

/* I'm styling code and monospace elements */
code, kbd, samp, pre {
  font-family: var(--font-mono);
  font-size: 0.875em;
}

pre {
  background: var(--bg-secondary);
  border: 1px solid var(--border-primary);
  border-radius: var(--border-radius);
  padding: 1rem;
  overflow-x: auto;
  line-height: 1.4;
}

code {
  background: var(--bg-secondary);
  border-radius: 0.25rem;
  padding: 0.125rem 0.25rem;
  font-size: 0.85em;
}

/* I'm creating smooth link transitions */
a {
  color: var(--color-primary);
  text-decoration: none;
  transition: color var(--duration-fast) ease-in-out;
}

a:hover {
  color: var(--color-secondary);
}

/* I'm establishing form element base styles */
input, textarea, select, button {
  font: inherit;
  color: inherit;
}

input, textarea, select {
  background-color: var(--bg-secondary);
  border: 1px solid var(--border-primary);
  border-radius: var(--border-radius);
  padding: 0.5rem 0.75rem;
  transition: border-color var(--duration-fast) ease-in-out;
}

input:focus, textarea:focus, select:focus {
  border-color: var(--color-primary);
  box-shadow: 0 0 0 2px rgba(34, 211, 238, 0.2);
}

input::placeholder, textarea::placeholder {
  color: var(--text-muted);
}

/* I'm creating custom scrollbar styles */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: var(--bg-secondary);
}

::-webkit-scrollbar-thumb {
  background: var(--border-secondary);
  border-radius: 4px;
  transition: background var(--duration-fast) ease-in-out;
}

::-webkit-scrollbar-thumb:hover {
  background: var(--text-muted);
}

/* I'm defining custom animations */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInLeft {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.7;
  }
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes float {
  0%, 100% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-10px);
  }
}

@keyframes glow {
  0%, 100% {
    box-shadow: 0 0 5px var(--color-primary);
  }
  50% {
    box-shadow: 0 0 20px var(--color-primary);
  }
}

@keyframes matrix-rain {
  0% {
    transform: translateY(-100vh);
    opacity: 0;
  }
  10% {
    opacity: 1;
  }
  90% {
    opacity: 1;
  }
  100% {
    transform: translateY(100vh);
    opacity: 0;
  }
}

/* I'm creating utility animation classes */
.animate-fade-in {
  animation: fadeIn var(--duration-medium) ease-out;
}

.animate-fade-in-up {
  animation: fadeInUp var(--duration-medium) ease-out;
}

.animate-slide-in-left {
  animation: slideInLeft var(--duration-medium) ease-out;
}

.animate-slide-in-right {
  animation: slideInRight var(--duration-medium) ease-out;
}

.animate-pulse-slow {
  animation: pulse 2s ease-in-out infinite;
}

.animate-float {
  animation: float 3s ease-in-out infinite;
}

.animate-glow {
  animation: glow 2s ease-in-out infinite;
}

/* I'm defining component base styles */
.card {
  background-color: var(--bg-tertiary);
  border: 1px solid var(--border-primary);
  border-radius: var(--border-radius-lg);
  padding: 1.5rem;
  transition: border-color var(--duration-fast) ease-in-out;
}

.card:hover {
  border-color: var(--border-secondary);
}

.button {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.625rem 1.25rem;
  border-radius: var(--border-radius);
  font-family: var(--font-mono);
  font-size: 0.875rem;
  font-weight: 500;
  letter-spacing: 0.025em;
  text-transform: uppercase;
  transition: all var(--duration-fast) ease-in-out;
  cursor: pointer;
  border: none;
  text-decoration: none;
}

.button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.button-primary {
  background-color: var(--color-primary);
  color: var(--bg-primary);
}

.button-primary:hover:not(:disabled) {
  background-color: var(--color-secondary);
  box-shadow: var(--shadow-glow);
}

.button-secondary {
  background-color: transparent;
  color: var(--text-primary);
  border: 1px solid var(--border-secondary);
}

.button-secondary:hover:not(:disabled) {
  background-color: var(--bg-tertiary);
  border-color: var(--color-primary);
}

.button-ghost {
  background-color: transparent;
  color: var(--text-secondary);
}

.button-ghost:hover:not(:disabled) {
  background-color: var(--bg-secondary);
  color: var(--text-primary);
}

/* I'm creating loading spinner styles */
.spinner {
  width: 2rem;
  height: 2rem;
  border: 2px solid var(--border-primary);
  border-top-color: var(--color-primary);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

.spinner-sm {
  width: 1rem;
  height: 1rem;
  border-width: 1px;
}

.spinner-lg {
  width: 3rem;
  height: 3rem;
  border-width: 3px;
}

/* I'm defining modal and overlay styles */
.modal-overlay {
  position: fixed;
  inset: 0;
  background-color: rgba(0, 0, 0, 0.8);
  backdrop-filter: blur(4px);
  z-index: var(--z-modal);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 1rem;
}

.modal-content {
  background-color: var(--bg-card);
  border: 1px solid var(--border-secondary);
  border-radius: var(--border-radius-lg);
  max-width: 90vw;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: var(--shadow-lg);
}

/* I'm creating tooltip styles */
.tooltip {
  position: relative;
}

.tooltip::after {
  content: attr(data-tooltip);
  position: absolute;
  bottom: 100%;
  left: 50%;
  transform: translateX(-50%);
  background-color: var(--bg-card);
  color: var(--text-primary);
  border: 1px solid var(--border-secondary);
  border-radius: var(--border-radius);
  padding: 0.5rem 0.75rem;
  font-size: 0.75rem;
  white-space: nowrap;
  opacity: 0;
  pointer-events: none;
  transition: opacity var(--duration-fast) ease-in-out;
  z-index: var(--z-tooltip);
  margin-bottom: 0.25rem;
}

.tooltip:hover::after {
  opacity: 1;
}

/* I'm creating selection and highlight styles */
::selection {
  background-color: var(--color-primary);
  color: var(--bg-primary);
}

::-moz-selection {
  background-color: var(--color-primary);
  color: var(--bg-primary);
}

/* I'm defining text utility classes */
.text-mono {
  font-family: var(--font-mono);
}

.text-gradient {
  background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

.text-glow {
  text-shadow: 0 0 10px currentColor;
}

/* I'm creating layout utilities */
.container {
  width: 100%;
  max-width: 1200px;
  margin-left: auto;
  margin-right: auto;
  padding-left: 1rem;
  padding-right: 1rem;
}

@media (min-width: 640px) {
  .container {
    padding-left: 1.5rem;
    padding-right: 1.5rem;
  }
}

@media (min-width: 1024px) {
  .container {
    padding-left: 2rem;
    padding-right: 2rem;
  }
}

/* I'm defining responsive grid utilities */
.grid-auto-fit {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 1.5rem;
}

.grid-auto-fill {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 1rem;
}

/* I'm creating visual effect utilities */
.backdrop-blur-sm {
  backdrop-filter: blur(4px);
}

.backdrop-blur-md {
  backdrop-filter: blur(8px);
}

.backdrop-blur-lg {
  backdrop-filter: blur(16px);
}

.glass-effect {
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.1);
}

/* I'm creating responsive text utilities */
.text-responsive {
  font-size: clamp(1rem, 2.5vw, 1.5rem);
}

.heading-responsive {
  font-size: clamp(2rem, 5vw, 4rem);
}

/* I'm defining focus management for accessibility */
.focus-ring:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

.focus-ring-inset:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: -2px;
}

/* I'm creating print styles */
@media print {
  * {
    background: transparent !important;
    color: black !important;
    box-shadow: none !important;
    text-shadow: none !important;
  }

  a, a:visited {
    text-decoration: underline;
  }

  .no-print {
    display: none !important;
  }
}

/* I'm handling reduced motion preferences */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* I'm creating dark mode specific adjustments */
@media (prefers-color-scheme: dark) {
  /* We're already dark by default, but ensuring consistency */
  body {
    background-color: var(--bg-primary);
    color: var(--text-primary);
  }
}
