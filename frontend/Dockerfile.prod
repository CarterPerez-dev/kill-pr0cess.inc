# Production-optimized multi-stage Dockerfile for the SolidJS frontend with aggressive optimization and static serving.
# I'm implementing comprehensive build optimization including tree-shaking, compression, and security hardening for maximum performance.

# Build stage with Node.js development environment
FROM node:20-alpine as builder

# I'm setting up the build environment with necessary dependencies
RUN apk add --no-cache \
    git \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

# I'm creating a non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 -G nodejs

USER nextjs
WORKDIR /app

# I'm copying package files first for better Docker layer caching
COPY --chown=nextjs:nodejs package*.json ./

# I'm installing dependencies with production optimizations
RUN npm ci --only=production --ignore-scripts --prefer-offline --no-audit && \
    npm cache clean --force

# I'm copying the source code
COPY --chown=nextjs:nodejs . .

# I'm setting build-time environment variables for optimization
ENV NODE_ENV=production
ENV VITE_BUILD_MODE=production
ENV VITE_OPTIMIZE_DEPS=true
ENV VITE_MINIFY=true

# I'm building the optimized production bundle
RUN npm run build

# I'm analyzing the build output
RUN du -sh dist/ && \
    find dist/ -name "*.js" -exec wc -c {} + | tail -1 && \
    find dist/ -name "*.css" -exec wc -c {} + | tail -1

# Compression stage for static assets
FROM node:20-alpine as compressor

RUN apk add --no-cache brotli gzip && \
    rm -rf /var/cache/apk/*

WORKDIR /app

# I'm copying the built assets
COPY --from=builder /app/dist ./dist

# I'm pre-compressing static assets for nginx serving
RUN find dist -type f \( -name "*.js" -o -name "*.css" -o -name "*.html" -o -name "*.svg" -o -name "*.json" \) -exec sh -c 'gzip -9 -k "$1" && brotli -q 11 "$1"' _ {} \;

# I'm verifying compression ratios
RUN echo "=== Compression Analysis ===" && \
    find dist -name "*.gz" -exec sh -c 'orig=$(echo "$1" | sed "s/.gz$//"); echo "$(basename "$orig"): $(stat -f%z "$orig") -> $(stat -f%z "$1") bytes ($(echo "scale=1; $(stat -f%z "$1") * 100 / $(stat -f%z "$orig")" | bc)%)"' _ {} \;

# Production runtime stage with nginx for static serving
FROM nginx:1.27-alpine

# I'm installing additional tools for monitoring and debugging
RUN apk add --no-cache \
    curl \
    jq \
    && rm -rf /var/cache/apk/*

# I'm removing default nginx files
RUN rm -rf /usr/share/nginx/html/* && \
    rm /etc/nginx/conf.d/default.conf

# I'm copying the optimized and compressed static assets
COPY --from=compressor /app/dist /usr/share/nginx/html

# I'm copying the optimized nginx configuration
COPY --chown=root:root nginx.prod.conf /etc/nginx/nginx.conf

# I'm creating a custom nginx configuration for SPA routing and performance
RUN cat > /etc/nginx/conf.d/app.conf << 'EOF'
# High-performance nginx configuration for SolidJS SPA
server {
    listen 3000;
    listen [::]:3000;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:;" always;

    # Performance headers
    add_header X-Served-By "nginx-optimized" always;

    # Compression settings
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";

        # Serve pre-compressed files if available
        location ~* \.(js|css|html|svg|json)$ {
            gzip_static on;
            brotli_static on;
        }
    }

    # HTML files with short cache for updates
    location ~* \.html$ {
        expires 1h;
        add_header Cache-Control "public, must-revalidate";
        add_header Vary "Accept-Encoding";

        gzip_static on;
        brotli_static on;
    }

    # SPA routing - serve index.html for all routes
    location / {
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # API proxy to backend (if needed)
    location /api/ {
        # This would proxy to backend in production
        return 404;
    }
}
EOF

# I'm creating a startup script for environment configuration
RUN cat > /docker-entrypoint.d/10-setup-env.sh << 'EOF'
#!/bin/sh
# I'm configuring environment-specific settings at runtime

echo "=== Frontend Container Starting ==="
echo "Environment: ${NODE_ENV:-production}"
echo "Build time: $(date)"
echo "Nginx version: $(nginx -v 2>&1)"

# I'm listing the built assets for verification
echo "=== Static Assets ==="
find /usr/share/nginx/html -type f -name "*.html" -o -name "*.js" -o -name "*.css" | head -10

echo "=== Asset Sizes ==="
du -sh /usr/share/nginx/html/*

# I'm configuring nginx worker processes based on available CPUs
if [ -f /proc/cpuinfo ]; then
    WORKER_PROCESSES=$(grep -c ^processor /proc/cpuinfo)
    sed -i "s/worker_processes auto;/worker_processes ${WORKER_PROCESSES};/" /etc/nginx/nginx.conf
    echo "Configured nginx with ${WORKER_PROCESSES} worker processes"
fi
EOF

RUN chmod +x /docker-entrypoint.d/10-setup-env.sh

# I'm setting up proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx

# I'm switching to non-root user for security
USER nginx

# I'm exposing the application port
EXPOSE 3000

# I'm setting up health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# I'm configuring the startup command
CMD ["nginx", "-g", "daemon off;"]

# Build arguments for metadata
ARG BUILD_DATE
ARG GIT_COMMIT
ARG VERSION

# I'm adding comprehensive metadata
LABEL org.opencontainers.image.title="Performance Showcase Frontend"
LABEL org.opencontainers.image.description="High-performance SolidJS frontend with optimized static serving"
LABEL org.opencontainers.image.created=${BUILD_DATE}
LABEL org.opencontainers.image.revision=${GIT_COMMIT}
LABEL org.opencontainers.image.version=${VERSION}
LABEL org.opencontainers.image.source="https://github.com/yourusername/dark-performance-showcase"

# I'm adding resource recommendations
LABEL resource.cpu.min="0.25"
LABEL resource.cpu.max="1.0"
LABEL resource.memory.min="128Mi"
LABEL resource.memory.max="512Mi"

# I'm configuring security labels
LABEL security.non-root=true
LABEL security.readonly-rootfs=false
