name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Backend testing and validation
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: rustfmt, clippy

    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      working-directory: ./backend
      run: cargo fmt --all -- --check

    - name: Run clippy
      working-directory: ./backend
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      working-directory: ./backend
      run: cargo test --verbose
      env:
        DATABASE_URL: postgresql://postgres:testpass@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379

    - name: Run benchmarks
      working-directory: ./backend
      run: cargo bench --verbose

  # Frontend testing and validation
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Type check
      working-directory: ./frontend
      run: npm run type-check

    - name: Lint
      working-directory: ./frontend
      run: npm run lint

    - name: Build
      working-directory: ./frontend
      run: npm run build

    - name: Test
      working-directory: ./frontend
      run: npm test

  # Performance benchmarking
  performance-benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Start services
      run: docker-compose up -d --build

    - name: Wait for services to be ready
      run: |
        timeout 120 bash -c 'until curl -f http://localhost:80/health; do sleep 2; done'

    - name: Run fractal benchmark
      run: |
        curl -X POST http://localhost:80/api/fractals/benchmark \
          -H "Content-Type: application/json" \
          -d '{"iterations": 5}' \
          -o benchmark_results.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark_results.json

    - name: Stop services
      run: docker-compose down
