# Environment configuration example

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL connection string for primary database
DATABASE_URL=postgresql://username:password@localhost:5432/name

# Database connection pool settings for optimal performance
DATABASE_MAX_CONNECTIONS=20
DATABASE_MIN_CONNECTIONS=5
DATABASE_CONNECTION_TIMEOUT=30
DATABASE_IDLE_TIMEOUT=300

# Database performance tuning 
DATABASE_STATEMENT_CACHE_SIZE=1000
DATABASE_QUERY_TIMEOUT_SECONDS=45

# =============================================================================
# REDIS CONFIGURATION  
# =============================================================================

# Redis connection string for caching and real-time data
REDIS_URL=redis://username:password@localhost:6379/databasename

# Redis connection pool settings
REDIS_MAX_CONNECTIONS=10
REDIS_CONNECTION_TIMEOUT=5
REDIS_COMMAND_TIMEOUT=10

# Redis-specific configuration
REDIS_KEY_PREFIX=pre_fix:
REDIS_DEFAULT_TTL=3600

# =============================================================================
# GITHUB API INTEGRATION
# =============================================================================

# GitHub Personal Access Token 
# Create at: https://github.com/settings/tokens
# Permissions needed: repo (for public repos), read:user
GITHUB_TOKEN=ghp_your_github_personal_access_token_here

# GitHub username for repository fetching
GITHUB_USERNAME=your_github_username

# GitHub API configuration
GITHUB_API_BASE_URL=https://api.github.com
GITHUB_RATE_LIMIT_REQUESTS=5000
GITHUB_RATE_LIMIT_WINDOW=3600
GITHUB_CACHE_TTL=1800

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Server binding configuration
HOST=0.0.0.0
PORT=3001

# Environment specification
ENVIRONMENT=development
# Options: development, staging, production

# Frontend URL for CORS configuration
FRONTEND_URL=http://localhost:3000

# API versioning and documentation
API_VERSION=v1
API_DOCS_ENABLED=true

# =============================================================================
# LOGGING AND MONITORING
# =============================================================================

# Rust logging configuration
# Levels: error, warn, info, debug, trace
RUST_LOG=info

# Structured logging format (json or plain)
LOG_FORMAT=plain

# Log file configuration (optional)
LOG_FILE_ENABLED=false
LOG_FILE_PATH=./logs/dark-performance.log
LOG_FILE_MAX_SIZE=100MB
LOG_FILE_MAX_FILES=10

# =============================================================================
# PERFORMANCE MONITORING
# =============================================================================

# Prometheus metrics configuration
PROMETHEUS_PORT=9090
PROMETHEUS_ENDPOINT=/metrics
METRICS_ENABLED=true

# Performance metrics collection intervals (in seconds)
SYSTEM_METRICS_INTERVAL=60
APPLICATION_METRICS_INTERVAL=30
FRACTAL_METRICS_INTERVAL=10

# Health check configuration
HEALTH_CHECK_ENDPOINT=/health
HEALTH_CHECK_TIMEOUT=10

# =============================================================================
# FRACTAL COMPUTATION CONFIGURATION
# =============================================================================

# Parallel processing configuration
RAYON_NUM_THREADS=0
# 0 = auto-detect optimal thread count

# Computational limits for safety
MAX_FRACTAL_WIDTH=4096
MAX_FRACTAL_HEIGHT=4096
MAX_FRACTAL_ITERATIONS=10000
MAX_FRACTAL_ZOOM=1e15

# Performance optimization settings
FRACTAL_CACHE_ENABLED=true
FRACTAL_CACHE_SIZE_MB=256
FRACTAL_COMPUTATION_TIMEOUT=120

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# JWT configuration for authentication (if implemented)
JWT_SECRET=your_jwt_secret_key_minimum_32_characters_long
JWT_EXPIRATION_HOURS=24

# CORS configuration
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS
CORS_ALLOWED_HEADERS=Content-Type,Authorization,X-Requested-With

# Rate limiting configuration
RATE_LIMIT_REQUESTS_PER_MINUTE=100
RATE_LIMIT_BURST_SIZE=20
RATE_LIMIT_ENABLED=true

# API endpoint specific rate limits
FRACTAL_RATE_LIMIT_PER_MINUTE=10
GITHUB_RATE_LIMIT_PER_MINUTE=60

# =============================================================================
# CACHING CONFIGURATION
# =============================================================================

# Application-level caching
CACHE_ENABLED=true
CACHE_DEFAULT_TTL=3600
CACHE_MAX_SIZE_MB=512

# GitHub data caching
GITHUB_CACHE_ENABLED=true
GITHUB_CACHE_TTL=1800
GITHUB_REPO_CACHE_TTL=3600

# Performance metrics caching
METRICS_CACHE_TTL=300
SYSTEM_INFO_CACHE_TTL=60

# =============================================================================  
# GOOGLE CLOUD CONFIGURATION (for deployment)
# =============================================================================

# Google Cloud Project configuration
GOOGLE_CLOUD_PROJECT_ID=your-project-id-here
GOOGLE_CLOUD_REGION=us-central1

# Cloud SQL configuration (if using managed database)
# CLOUD_SQL_CONNECTION_NAME=project:region:instance
# CLOUD_SQL_DATABASE_URL=postgresql://user:pass@host/db

# Cloud Storage configuration (if using for static assets)
# GOOGLE_CLOUD_STORAGE_BUCKET=your-bucket-name

# Cloud Monitoring configuration
# GOOGLE_CLOUD_MONITORING_ENABLED=true

# =============================================================================
# DEVELOPMENT SPECIFIC CONFIGURATION
# =============================================================================

# Development server configuration
DEV_RELOAD_ENABLED=true
DEV_OPEN_BROWSER=false

# Testing configuration
TEST_DATABASE_URL=postgresql://darkuser:darkpass@localhost:5432/dark_performance_test
TEST_REDIS_URL=redis://localhost:6379/1

# Development debugging
DEBUG_SQL_QUERIES=false
DEBUG_REDIS_COMMANDS=false
DEBUG_HTTP_REQUESTS=false

# =============================================================================
# PRODUCTION SPECIFIC CONFIGURATION
# =============================================================================

# Production optimization flags
PRODUCTION_MODE=false
OPTIMIZE_FOR_MEMORY=false
OPTIMIZE_FOR_CPU=true

# Production monitoring
ERROR_REPORTING_ENABLED=false
PERFORMANCE_PROFILING_ENABLED=false

# Production security
SECURE_HEADERS_ENABLED=true
HTTPS_ONLY=false
TRUST_PROXY=false

# =============================================================================
# OPTIONAL FEATURES
# =============================================================================

# GPU acceleration (if available)
GPU_ACCELERATION_ENABLED=false
CUDA_DEVICE_ID=0

# Machine learning features (if implemented)
ML_PERFORMANCE_PREDICTION=false
ML_MODEL_PATH=./models/

# Advanced caching
DISTRIBUTED_CACHE_ENABLED=false
CACHE_CLUSTER_NODES=redis://node1:6379,redis://node2:6379

# =============================================================================
# CONTAINER AND DEPLOYMENT CONFIGURATION
# =============================================================================

# Docker-specific settings
CONTAINER_NAME=dark-performance-backend
CONTAINER_MEMORY_LIMIT=2g
CONTAINER_CPU_LIMIT=2

# Health check configuration for containers
HEALTH_CHECK_INTERVAL=30s
HEALTH_CHECK_TIMEOUT=10s
HEALTH_CHECK_RETRIES=3
HEALTH_CHECK_START_PERIOD=60s

# Load balancer configuration
LOAD_BALANCER_HEALTH_CHECK_PATH=/health
LOAD_BALANCER_TIMEOUT=30

# =============================================================================
# BACKUP AND MAINTENANCE
# =============================================================================

# Automated backup configuration
BACKUP_ENABLED=false
BACKUP_SCHEDULE="0 2 * * *"
BACKUP_RETENTION_DAYS=30

# Maintenance mode
MAINTENANCE_MODE_ENABLED=false
MAINTENANCE_MESSAGE="System under maintenance"

# Database maintenance
AUTO_VACUUM_ENABLED=true
STATISTICS_UPDATE_FREQUENCY=3600

# =============================================================================
# NOTES AND EXAMPLES
# =============================================================================

# Example production DATABASE_URL:
# DATABASE_URL=postgresql://prod_user:secure_password@db.example.com:5432/dark_performance_prod

# Example with SSL:
# DATABASE_URL=postgresql://user:pass@host:5432/db?sslmode=require

# Example Redis with authentication:
# REDIS_URL=redis://username:password@redis.example.com:6379/0

# Example with Redis Cluster:
# REDIS_URL=redis://node1:6379,redis://node2:6379,redis://node3:6379

# For Google Cloud SQL:
# DATABASE_URL=postgresql://user:pass@/db?host=/cloudsql/project:region:instance

# Remember to:
# 1. Never commit the actual .env file to version control
# 2. Use strong, unique passwords in production
# 3. Rotate secrets regularly
# 4. Use managed secrets services in production (Google Secret Manager, AWS Secrets Manager, etc.)
# 5. Validate all environment variables on application startup
